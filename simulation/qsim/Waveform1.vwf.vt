// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2019 21:16:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          KSA_64
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module KSA_64_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [63:0] x;
reg [63:0] y;
// wires                                               
wire [63:0] sum;

// assign statements (if any)                          
KSA_64 i1 (
// port map - connection between master ports and signals/registers   
	.sum(sum),
	.x(x),
	.y(y)
);
initial 
begin 
#1000000 $finish;
end 

// c_in
initial
begin
	c_in = 1'b0;
end 
// x[ 63 ]
initial
begin
	x[63] = 1'b0;
end 
// x[ 62 ]
initial
begin
	x[62] = 1'b0;
end 
// x[ 61 ]
initial
begin
	x[61] = 1'b0;
end 
// x[ 60 ]
initial
begin
	x[60] = 1'b0;
end 
// x[ 59 ]
initial
begin
	x[59] = 1'b0;
end 
// x[ 58 ]
initial
begin
	x[58] = 1'b0;
end 
// x[ 57 ]
initial
begin
	x[57] = 1'b0;
end 
// x[ 56 ]
initial
begin
	x[56] = 1'b0;
end 
// x[ 55 ]
initial
begin
	x[55] = 1'b0;
end 
// x[ 54 ]
initial
begin
	x[54] = 1'b0;
end 
// x[ 53 ]
initial
begin
	x[53] = 1'b0;
end 
// x[ 52 ]
initial
begin
	x[52] = 1'b0;
end 
// x[ 51 ]
initial
begin
	x[51] = 1'b0;
end 
// x[ 50 ]
initial
begin
	x[50] = 1'b0;
end 
// x[ 49 ]
initial
begin
	x[49] = 1'b0;
end 
// x[ 48 ]
initial
begin
	x[48] = 1'b0;
end 
// x[ 47 ]
initial
begin
	x[47] = 1'b0;
end 
// x[ 46 ]
initial
begin
	x[46] = 1'b0;
end 
// x[ 45 ]
initial
begin
	x[45] = 1'b0;
end 
// x[ 44 ]
initial
begin
	x[44] = 1'b0;
end 
// x[ 43 ]
initial
begin
	x[43] = 1'b0;
end 
// x[ 42 ]
initial
begin
	x[42] = 1'b0;
end 
// x[ 41 ]
initial
begin
	x[41] = 1'b0;
end 
// x[ 40 ]
initial
begin
	x[40] = 1'b0;
end 
// x[ 39 ]
initial
begin
	x[39] = 1'b0;
end 
// x[ 38 ]
initial
begin
	x[38] = 1'b0;
end 
// x[ 37 ]
initial
begin
	x[37] = 1'b0;
end 
// x[ 36 ]
initial
begin
	x[36] = 1'b0;
end 
// x[ 35 ]
initial
begin
	x[35] = 1'b0;
end 
// x[ 34 ]
initial
begin
	x[34] = 1'b0;
end 
// x[ 33 ]
initial
begin
	x[33] = 1'b0;
end 
// x[ 32 ]
initial
begin
	x[32] = 1'b0;
end 
// x[ 31 ]
initial
begin
	x[31] = 1'b0;
end 
// x[ 30 ]
initial
begin
	x[30] = 1'b0;
end 
// x[ 29 ]
initial
begin
	x[29] = 1'b0;
end 
// x[ 28 ]
initial
begin
	x[28] = 1'b0;
end 
// x[ 27 ]
initial
begin
	x[27] = 1'b0;
end 
// x[ 26 ]
initial
begin
	x[26] = 1'b0;
end 
// x[ 25 ]
initial
begin
	x[25] = 1'b0;
end 
// x[ 24 ]
initial
begin
	x[24] = 1'b0;
end 
// x[ 23 ]
initial
begin
	x[23] = 1'b0;
end 
// x[ 22 ]
initial
begin
	x[22] = 1'b0;
end 
// x[ 21 ]
initial
begin
	x[21] = 1'b0;
end 
// x[ 20 ]
initial
begin
	x[20] = 1'b0;
end 
// x[ 19 ]
initial
begin
	x[19] = 1'b0;
end 
// x[ 18 ]
initial
begin
	x[18] = 1'b0;
end 
// x[ 17 ]
initial
begin
	x[17] = 1'b0;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'b0;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b1;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b1;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
end 
// y[ 63 ]
initial
begin
	y[63] = 1'b0;
end 
// y[ 62 ]
initial
begin
	y[62] = 1'b0;
end 
// y[ 61 ]
initial
begin
	y[61] = 1'b0;
end 
// y[ 60 ]
initial
begin
	y[60] = 1'b0;
end 
// y[ 59 ]
initial
begin
	y[59] = 1'b0;
end 
// y[ 58 ]
initial
begin
	y[58] = 1'b0;
end 
// y[ 57 ]
initial
begin
	y[57] = 1'b0;
end 
// y[ 56 ]
initial
begin
	y[56] = 1'b0;
end 
// y[ 55 ]
initial
begin
	y[55] = 1'b0;
end 
// y[ 54 ]
initial
begin
	y[54] = 1'b0;
end 
// y[ 53 ]
initial
begin
	y[53] = 1'b0;
end 
// y[ 52 ]
initial
begin
	y[52] = 1'b0;
end 
// y[ 51 ]
initial
begin
	y[51] = 1'b0;
end 
// y[ 50 ]
initial
begin
	y[50] = 1'b0;
end 
// y[ 49 ]
initial
begin
	y[49] = 1'b0;
end 
// y[ 48 ]
initial
begin
	y[48] = 1'b0;
end 
// y[ 47 ]
initial
begin
	y[47] = 1'b0;
end 
// y[ 46 ]
initial
begin
	y[46] = 1'b0;
end 
// y[ 45 ]
initial
begin
	y[45] = 1'b0;
end 
// y[ 44 ]
initial
begin
	y[44] = 1'b0;
end 
// y[ 43 ]
initial
begin
	y[43] = 1'b0;
end 
// y[ 42 ]
initial
begin
	y[42] = 1'b0;
end 
// y[ 41 ]
initial
begin
	y[41] = 1'b0;
end 
// y[ 40 ]
initial
begin
	y[40] = 1'b0;
end 
// y[ 39 ]
initial
begin
	y[39] = 1'b0;
end 
// y[ 38 ]
initial
begin
	y[38] = 1'b0;
end 
// y[ 37 ]
initial
begin
	y[37] = 1'b0;
end 
// y[ 36 ]
initial
begin
	y[36] = 1'b0;
end 
// y[ 35 ]
initial
begin
	y[35] = 1'b0;
end 
// y[ 34 ]
initial
begin
	y[34] = 1'b0;
end 
// y[ 33 ]
initial
begin
	y[33] = 1'b0;
end 
// y[ 32 ]
initial
begin
	y[32] = 1'b0;
end 
// y[ 31 ]
initial
begin
	y[31] = 1'b0;
end 
// y[ 30 ]
initial
begin
	y[30] = 1'b0;
end 
// y[ 29 ]
initial
begin
	y[29] = 1'b0;
end 
// y[ 28 ]
initial
begin
	y[28] = 1'b0;
end 
// y[ 27 ]
initial
begin
	y[27] = 1'b0;
end 
// y[ 26 ]
initial
begin
	y[26] = 1'b0;
end 
// y[ 25 ]
initial
begin
	y[25] = 1'b0;
end 
// y[ 24 ]
initial
begin
	y[24] = 1'b0;
end 
// y[ 23 ]
initial
begin
	y[23] = 1'b0;
end 
// y[ 22 ]
initial
begin
	y[22] = 1'b0;
end 
// y[ 21 ]
initial
begin
	y[21] = 1'b0;
end 
// y[ 20 ]
initial
begin
	y[20] = 1'b0;
end 
// y[ 19 ]
initial
begin
	y[19] = 1'b0;
end 
// y[ 18 ]
initial
begin
	y[18] = 1'b0;
end 
// y[ 17 ]
initial
begin
	y[17] = 1'b0;
end 
// y[ 16 ]
initial
begin
	y[16] = 1'b0;
end 
// y[ 15 ]
initial
begin
	y[15] = 1'b0;
end 
// y[ 14 ]
initial
begin
	y[14] = 1'b0;
end 
// y[ 13 ]
initial
begin
	y[13] = 1'b0;
end 
// y[ 12 ]
initial
begin
	y[12] = 1'b0;
end 
// y[ 11 ]
initial
begin
	y[11] = 1'b0;
end 
// y[ 10 ]
initial
begin
	y[10] = 1'b0;
end 
// y[ 9 ]
initial
begin
	y[9] = 1'b0;
end 
// y[ 8 ]
initial
begin
	y[8] = 1'b0;
end 
// y[ 7 ]
initial
begin
	y[7] = 1'b0;
end 
// y[ 6 ]
initial
begin
	y[6] = 1'b0;
end 
// y[ 5 ]
initial
begin
	y[5] = 1'b0;
end 
// y[ 4 ]
initial
begin
	y[4] = 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b1;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b1;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
end 
endmodule

